-- For this project, I downloaded Spotify data from Kaggle.
-- Then, I inserted the Spotify Data .csv into the table.
-- Finally, I explored the data using the following SQL.

-- #1. What is the average danceability by artist and track?
SELECT AVG(danceability)
FROM BIT_DB.Spotifydata;

-- #2. Who are the Top 10 Artists based on popularity?
SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10;

-- #3. What artist released the longest song?
SELECT artist_name, duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms DESC
LIMIT 1;

-- #4. What artist released the shortest song?
SELECT artist_name, duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms ASC
LIMIT 1;

--  #5. What is the average duration of all the songs?
SELECT AVG(duration_ms)
FROM BIT_DB.Spotifydata;

-- #6. What's the average danceability for the 10 most popular songs?
SELECT AVG(danceability)
FROM BIT_DB.Spotifydata
WHERE popularity >= 92
LIMIT 10;

-- #7. What is the average popularity, danceability and energy?
SELECT
AVG(popularity),
AVG(danceability),
AVG(energy)
FROM BIT_DB.Spotifydata;

-- #8.  What is the average danceability of the top 10 most popular songs?
WITH top_10_songs AS (
SELECT s.track_name,
s.popularity,
danceability
FROM SpotifyData s 
ORDER BY s.popularity DESC
LIMIT 10
)
 
SELECT AVG(danceability) AS 'Avg Danceability of Top 10 Songs'
FROM top_10_songs;
-- Note: to find the correct information to this question, I used a CTE or Common Table Expression.
-- In the inner portion of the query, I told the CTE to only select the first 10 songs with the highest popularity values.
-- Then, in the outer query, I told the CTE to calculate the average danceability of the songs it selected from the inner query.


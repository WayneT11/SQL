-- In this SQL code, I first explored the data, noting all tables with messy data. Then, I answered some questions about the data, and left notes where the answer was either challenging or required me to learn something new (yes some did require me to learn something new but were not as challenging as others!).

SELECT * FROM albums;
SELECT * FROM artists;
SELECT * FROM customers;
-- Note: columns 'Company', 'State', and 'Fax' have some NULL values

SELECT * FROM employees;
-- Note: employee 1 reports to = null

SELECT * FROM genres;
SELECT * FROM invoice_items;
-- Note: invoice id's have multiple of the same value

SELECT * FROM invoices;
SELECT * FROM invoices
ORDER BY CustomerId ASC;
-- Note: columns 'BillingState' and 'BillingPostalCode' have some NULL values

SELECT * FROM media_types;
SELECT * FROM playlist_track;
-- Note: playlist id's have multiple of the same value
SELECT COUNT(PlaylistId) FROM playlist_track WHERE PlaylistId = 1; -- 3290

SELECT * FROM playlists;
SELECT * FROM tracks;
-- Note: 'Composer' column has som NULL values
--         Also, 'AlbumId', 'MediaTypeId', 'GenreId', 'Composer', and 'UnitPrice' have multiple of the same value

-- #1. Show Customers (their full names, customer ID, and country) who are not in the US.
SELECT 
CustomerId, 
FirstName, 
LastName, 
Country
FROM customers
WHERE Country <> 'USA';

-- #2. Show only the Customers from Brazil.
SELECT 
CustomerId, 
FirstName, 
LastName, 
Country
FROM customers
WHERE Country = 'Brazil';

-- 3. Find the Invoices of customers who are from Brazil. The resulting table should show the customer's full name, Invoice ID, Date of the invoice, and billing country.
-- join on customerId's
SELECT 
customers.FirstName, 
customers.LastName, 
InvoiceId, 
InvoiceDate, 
BillingCountry 
FROM invoices
    LEFT JOIN customers
    ON customers.CustomerId = invoices.CustomerId;
    
-- #4. Show the Employees who are Sales Agents.
SELECT 
FirstName, 
LastName, 
Title 
FROM employees
WHERE Title = 'Sales Support Agent';
-- Or
SELECT 
FirstName, 
LastName, 
Title 
FROM employees
WHERE Title LIKE '%Sales%Agent%';

-- #5. Find a unique/distinct list of billing countries from the Invoice table.
SELECT DISTINCT BillingCountry FROM invoices;
-- also
SELECT COUNT(*) AS DistinctCountries
FROM (SELECT DISTINCT BillingCountry FROM invoices);

-- #6. Provide a query that shows the invoices associated with each sales agent. The resulting table should include the Sales Agent's full name.
-- join on invoices.customerid = customers.customerid AND customers.supportrepid = employees.employeeid
SELECT 
employees.FirstName AS 'Sales Agent First Name', 
employees.LastName AS 'Sales Agent Last Name', 
invoices.InvoiceId 
FROM invoices
    INNER JOIN customers
        ON invoices.CustomerId = customers.CustomerId
    INNER JOIN employees
        ON customers.SupportRepId = employees.EmployeeId
WHERE BillingState IS NOT NULL;
-- Note: for this query, I did have to look up how to join multiple tables as this was the first time I had ever attempted to do so.
-- I went on SQL Shack and read what they had on JOIN functions and concluded that the best function to use for this query was an INNER JOIN since it would only return the rows that match in each table.

-- #7. Show the Invoice Total, Customer name, Country, and Sales Agent name for all invoices and customers.
SELECT 
employees.FirstName AS 'Sales Agent First Name', 
employees.LastName AS 'Sales Agent Last Name', 
customers.FirstName AS 'Customer First Name', 
customers.LastName AS 'Customer Last Name', 
invoices.BillingCountry, 
invoices.Total 
FROM invoices
    INNER JOIN customers
        ON invoices.CustomerId = customers.CustomerId
    INNER JOIN employees
        ON customers.SupportRepId = employees.EmployeeId;

-- #8. How many Invoices were there in 2009?
SELECT COUNT(InvoiceDate) AS 'Invoices From 2009' FROM invoices
WHERE InvoiceDate LIKE '2009%';
-- or
SELECT COUNT(InvoiceDate) AS 'Invoices From 2009' FROM invoices
WHERE InvoiceDate < '2010-01-01 00:00:00';
-- Note: Here, I learned something new! I didn't think the 'less than' function would work since 'InvoiceDate' is not assigned as an Integer! But it worked!

-- #9. What are the total sales for 2009?
SELECT SUM(Total) AS 'Total Sales for 2009' FROM invoices
WHERE InvoiceDate LIKE '2009%';

-- #10. Write a query that includes the purchased track name with each invoice line ID.
-- join on invoice_items.trackid = tracks.trackid
SELECT 
invoice_items.InvoiceLineId, 
tracks.Name
FROM invoice_items
    INNER JOIN tracks
        ON invoice_items.TrackId = tracks.TrackId
ORDER BY InvoiceLineId ASC;

-- #11. Write a query that includes the purchased track name AND artist name with each invoice line ID.
SELECT 
invoice_items.InvoiceLineId, 
tracks.Name, 
tracks.Composer 
FROM invoice_items
    INNER JOIN tracks
        ON invoice_items.TrackId = tracks.TrackId
ORDER BY InvoiceLineId ASC;
--- or, without the tracks containing NULL composers
SELECT 
invoice_items.InvoiceLineId, 
tracks.Name, 
tracks.Composer 
FROM invoice_items
    INNER JOIN tracks
        ON invoice_items.TrackId = tracks.TrackId
    WHERE Composer IS NOT NULL
ORDER BY InvoiceLineId ASC;

-- #12. Provide a query that shows all the Tracks, and include the Album name, Media type, and Genre.
SELECT 
tracks.Name AS 'Track Name', 
albums.Title AS 'Album Title', 
media_types.Name AS 'Media Type', 
genres.Name AS 'Genre' 
FROM tracks
    INNER JOIN albums
        ON tracks.AlbumId = albums.AlbumId
    INNER JOIN media_types
        ON tracks.MediaTypeId = media_types.MediaTypeId
    INNER JOIN genres
        ON tracks.GenreId = genres.GenreId;
        
-- #13. Show the total sales made by each sales agent.
WITH TotalAgentSales AS (
SELECT DISTINCT 
employees.FirstName, 
employees.LastName, 
SUM(invoices.Total) OVER (PARTITION BY invoices.CustomerId) AS 'Total Sales'
FROM invoices
    INNER JOIN customers
        ON invoices.CustomerId = customers.CustomerId
    INNER JOIN employees
        ON customers.SupportRepId = employees.EmployeeId
)
SELECT DISTINCT 
TotalAgentSales.FirstName, 
TotalAgentSales.LastName, 
SUM(TotalAgentSales.'Total Sales') OVER (PARTITION BY TotalAgentSales.FirstName) AS 'Total Agent Sales'
FROM TotalAgentSales;
-- Note: This query was certainly the most challenging I have ever attempted and completed so far.
-- I first started with the inner query of the above CTE (Common Table Epression), and thought that would provide me with the correct information.
-- But when that inner query is run by itself, in the results are multiple rows containing the same first and last names, but different 'Total Sales' values.
-- I was not sure where I went wrong for there to be duplicates of the same names (and still not sure),
-- but I figured if I just turned that query into the inner query portion of a CTE, and then ran an outer query using the same OVER - PARTITION BY window function,
-- then the results would be further filtered down into what I was looking for.
-- For clarity, below is the code I began with, but did not produce the results I was looking for, as it contained many duplicates of the same names, with no real total of any one name.
SELECT DISTINCT 
employees.FirstName, 
employees.LastName, 
SUM(invoices.Total) OVER (PARTITION BY invoices.CustomerId) AS 'Total Sales'
FROM invoices
    INNER JOIN customers
        ON invoices.CustomerId = customers.CustomerId
    INNER JOIN employees
        ON customers.SupportRepId = employees.EmployeeId;

-- #14. Which sales agent made the most dollars in sales in 2009?
WITH TotalAgentSales AS (
SELECT DISTINCT 
employees.FirstName, 
employees.LastName, 
SUM(invoices.Total) OVER (PARTITION BY invoices.CustomerId) AS 'Total Sales'
FROM invoices
    INNER JOIN customers
        ON invoices.CustomerId = customers.CustomerId
    INNER JOIN employees
        ON customers.SupportRepId = employees.EmployeeId
WHERE invoices.InvoiceDate LIKE '2009%'
)
SELECT DISTINCT 
TotalAgentSales.FirstName, 
TotalAgentSales.LastName, 
SUM(TotalAgentSales.'Total Sales') OVER (PARTITION BY TotalAgentSales.FirstName) AS 'Total Agent Sales 2009'
FROM TotalAgentSales;
-- Note: This answer was fairly easy to find since I already had most of the code written from the previous answer.
-- I simply added the WHERE clause at the end of the inner query, telling it to only select information where the InvoiceDate begins with 2009,
-- and renamed the total sales column to 'Total Agent Sales 2009'.
